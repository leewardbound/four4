'use strict'

###*
# @ngdoc function
# @name four4App.directive:MediaDeckDirective
# @description
# # MediaDeckDirective
###

angular.module('four4App').directive 'fourMediaDeck', ->
  {
    replace: true
    templateUrl: 'components/decks/mediadeck.html'
    scope:
      deckName: '@'
      stage: '='
    link: ($scope, element, attr) ->
      if !$scope.deckName
        $scope.deckName = 'deck-' + 1 + (parseInt($scope.decks.length) or 0)
      deck = 'name': $scope.deckName
      deck._playOnMeasure = false
      deck.sync = on
      $scope.stage.decks[$scope.deckName] = deck
      $scope.title = 'hi'
      $scope.deck = deck
      deck.stage = $scope.stage
      deck.element = element
      deck.song =
        title: null
        path: null
        bpm: 0
        zeroBeat: 0
        ready: false
        audio_tag: false

      deck.makeInfo = ->
        deck.songInfo = [
          {
            title: 'Base BPM'
            value: deck.song.bpm
          }
          {
            title: 'Current BPM'
            value: deck.bpm
          }
          {
            title: 'Zero Beat'
            value: deck.song.zeroBeat
          }
        ]
        return

      deck.loadSong = (song) ->
        deck.song.tag.pause() if deck.song and deck.song.tag
        if song != deck.song
            $('audio', element).remove()
            element.append(deck.song.tag)
        deck.song = song
        deck.bpm = $scope.stage.tempo
        deck.playbackRate = bpmRatio(deck.song.bpm, deck.bpm)
        deck.makeInfo()
        console.log(deck, $scope.stage.tempo, deck.song.bpm, deck.bpm)
        deck.setMeasure(1, 1)
        return
      deck.setMeasure = (measure, part) ->
          measure ||= 1
          part ||= 1
          current_time = startOfMeasure(measure, part, deck.song.bpm)
          deck.position = {measure: measure, part: part, time: current_time,
          start_measure: deck.song.position?.start_measure,
          started: deck.song.position?.started}
          deck.song.audio_tag.currentTime = deck.song.zeroBeat + current_time
      deck.play = () ->
        deck.playing = on
        deck.song.audio_tag.playbackRate = deck.playbackRate
        deck.song.audio_tag.defaultPlaybackRate = deck.playbackRate
        if not deck.position
            deck.setMeasure(1, 1)
        if deck.sync
            deck._playOnMeasure = on
        else
            deck.song.audio_tag.volume = 1
            deck.song.audio_tag.playbackRate = bpmRatio(deck.song.bpm, $scope.stage.tempo)
            deck.song.audio_tag.defaultPlaybackRate = bpmRatio(deck.song.bpm, $scope.stage.tempo)
            deck.position.start_measure = $scope.stage.position.measure
            deck.position.started = $scope.stage.position.time
            deck.song.audio_tag.play()
        if !$scope.stage.playing
            $scope.stage.play()
        deck.position.started = getTime()
      deck.pause = () ->
          deck.playing = off
          deck.song.audio_tag.pause()
      deck.stop = () ->
          deck.pause()
          deck.setMeasure(1,1)
      return

  }

# ---
# generated by js2coffee 2.0.1
